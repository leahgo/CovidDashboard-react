{"version":3,"sources":["Components/Chart.js","Components/GenAge.js","Components/Covid.presenter.js","Components/Covid.js","App.js","reportWebVitals.js","index.js"],"names":["DecideCntChart","props","useState","isDecideCnt","setIsDecideCnt","isClearCnt","setIsClearCnt","isExamCnt","setIsExamCnt","isDeathCnt","setIsDeathCnt","isCareCnt","setIsCareCnt","isResutlNegCnt","setIsResutlNegCnt","isAccExamCnt","setIsAccExamCnt","isAccExamCompCnt","setIsAccExamCompCnt","isAccDefRate","setIsAccDefRate","className","width","height","data","strokeDasharray","dataKey","domain","type","stroke","fill","name","dot","unit","checked","onChange","e","target","GenAge","ageData","nameKey","cx","cy","label","entry","outerRadius","genData","Covid","page","setPage","Date","getTime","startDt","setStartDt","endDt","setEndDt","onClick","locale","ko","dateFormat","maxDate","closeOnScroll","placeholderText","selected","date","handleButtonClick","lineChartData","toString","setLineChartData","setAgeData","setGenData","setLineChart","a","console","log","moment","format","url","ServiceKey","startCreateDt","endCreateDt","tmpArr","axios","get","response","header","resultCode","body","items","length","item","reverse","push","resultMsg","setGenAgeCase","tmpAge","tmpGen","map","i","gubun","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0b58f73.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chart.css\";\r\n\r\nimport {\r\n  ComposedChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Line,\r\n  Bar,\r\n  Area,\r\n} from \"recharts\";\r\n\r\nconst DecideCntChart = (props) => {\r\n  // console.log(\"data\", props.data);\r\n  const [isDecideCnt, setIsDecideCnt] = useState(true); // 확진자 수\r\n  const [isClearCnt, setIsClearCnt] = useState(true); // 격리 해제 수\r\n  const [isExamCnt, setIsExamCnt] = useState(true); // 검사 진행 수\r\n  const [isDeathCnt, setIsDeathCnt] = useState(true); // 사망자 수\r\n  const [isCareCnt, setIsCareCnt] = useState(false); // 치료중 환자 수\r\n  const [isResutlNegCnt, setIsResutlNegCnt] = useState(false); // 결과 음성 수\r\n  const [isAccExamCnt, setIsAccExamCnt] = useState(false); // 누적 검사 수\r\n  const [isAccExamCompCnt, setIsAccExamCompCnt] = useState(false); // 누적 검사 완료 수\r\n  const [isAccDefRate, setIsAccDefRate] = useState(false); // 누적 확진률\r\n  return (\r\n    <div className=\"Chart\">\r\n      <ComposedChart\r\n        width={900}\r\n        height={500}\r\n        data={props.data}\r\n        // margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"stateDt\" domain={[\"auto\", \"auto\"]} />\r\n        <YAxis domain={[\"auto\", \"auto\"]} />\r\n        <Tooltip />\r\n        <Legend />\r\n        {isDecideCnt && (\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"decideCnt\"\r\n            stroke=\"#7400B8\"\r\n            fill=\"#7400B8\"\r\n            name=\"확진자 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isClearCnt && (\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"clearCnt\"\r\n            stroke=\"#80FFDB\"\r\n            fill=\"#80FFDB\"\r\n            name=\"격리해제 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isExamCnt && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"examCnt\"\r\n            stroke=\"#6930C3\"\r\n            name=\"검사진행 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isDeathCnt && (\r\n          <Bar\r\n            type=\"monotone\"\r\n            dataKey=\"deathCnt\"\r\n            fill=\"#ff0000\"\r\n            name=\"사망자 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isCareCnt && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"careCnt\"\r\n            stroke=\"#5E60CE\"\r\n            name=\"치료중 환자 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isResutlNegCnt && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"resutlNegCnt\"\r\n            stroke=\"#64DFDF\"\r\n            name=\"결과 음성 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isAccExamCnt && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"accExamCnt\"\r\n            stroke=\"#5390D9\"\r\n            name=\"누적 검사 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isAccExamCompCnt && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"accExamCompCnt\"\r\n            stroke=\"#56CFE1\"\r\n            name=\"누적 검사 완료 수\"\r\n            dot={false}\r\n          />\r\n        )}\r\n        {isAccDefRate && (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"accDefRate\"\r\n            stroke=\"#4EA8DE\"\r\n            name=\"누적 확진률\"\r\n            unit=\"%\"\r\n            dot={false}\r\n          />\r\n        )}\r\n      </ComposedChart>\r\n      <div className=\"Option\">\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isDecideCnt}\r\n            onChange={(e) => setIsDecideCnt(e.target.checked)}\r\n          />\r\n          확진자 수\r\n        </div>\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isClearCnt}\r\n            onChange={(e) => setIsClearCnt(e.target.checked)}\r\n          />\r\n          격리해제 수\r\n        </div>{\" \"}\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isExamCnt}\r\n            onChange={(e) => setIsExamCnt(e.target.checked)}\r\n          />\r\n          검사진행 수\r\n        </div>{\" \"}\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isDeathCnt}\r\n            onChange={(e) => setIsDeathCnt(e.target.checked)}\r\n          />\r\n          사망자 수\r\n        </div>{\" \"}\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isCareCnt}\r\n            onChange={(e) => setIsCareCnt(e.target.checked)}\r\n          />\r\n          치료중 환자 수\r\n        </div>{\" \"}\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isResutlNegCnt}\r\n            onChange={(e) => setIsResutlNegCnt(e.target.checked)}\r\n          />\r\n          결과 음성 수\r\n        </div>\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isAccExamCnt}\r\n            onChange={(e) => setIsAccExamCnt(e.target.checked)}\r\n          />\r\n          누적 검사 수\r\n        </div>\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isAccExamCompCnt}\r\n            onChange={(e) => setIsAccExamCompCnt(e.target.checked)}\r\n          />\r\n          누적 검사 완료 수\r\n        </div>\r\n        <div className=\"Checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isAccDefRate}\r\n            onChange={(e) => setIsAccDefRate(e.target.checked)}\r\n          />\r\n          누적 확진률\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DecideCntChart;\r\n","import React from \"react\";\r\nimport \"./GenAge.css\";\r\n\r\nimport { PieChart, Pie } from \"recharts\";\r\n\r\nconst GenAge = (props) => {\r\n  return (\r\n    <div className=\"Main\">\r\n      <PieChart width={1000} height={500}>\r\n        <Pie\r\n          data={props.ageData}\r\n          dataKey=\"death\"\r\n          nameKey=\"gubun\"\r\n          cx=\"30%\"\r\n          cy=\"50%\"\r\n          label={(entry) => entry.name}\r\n          outerRadius={130}\r\n          fill=\"#8884d8\"\r\n        />\r\n        <Pie\r\n          data={props.genData}\r\n          dataKey=\"death\"\r\n          nameKey=\"gubun\"\r\n          cx=\"70%\"\r\n          cy=\"50%\"\r\n          label={(entry) => entry.name}\r\n          outerRadius={130}\r\n          fill=\"#114399\"\r\n        />\r\n      </PieChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenAge;\r\n","import React, { useState } from \"react\";\r\nimport \"./Covid.css\";\r\nimport Chart from \"./Chart\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport GenAge from \"./GenAge\";\r\nimport \"./react-datepicker.css\";\r\nimport { ko } from \"date-fns/esm/locale\";\r\n\r\nconst Covid = (props) => {\r\n  const [page, setPage] = useState(\"Home\");\r\n  const [startDt, setStartDt] = useState(\r\n    new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000)\r\n  );\r\n  const [endDt, setEndDt] = useState(new Date());\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <div className=\"Toolbar\">\r\n        <br />\r\n        <h1>코로나19 실시간 상황판<br />Covid-19 Dashboard</h1>\r\n        <br />\r\n        <h2>※ 그래프가 보이지 않는 경우 브라우저에서 '안전하지 않은 콘텐츠 : 허용'으로 바꿔주세요.<br />https 연결중인 github.io에서 공공데이터 포털 http를 호출할 때 발생하는 오류입니다.</h2>\r\n      </div>\r\n      <div className=\"Navigation\">\r\n        <button\r\n          className=\"btnNav\"\r\n          onClick={() => {\r\n            setPage(\"Home\");\r\n          }}\r\n        >\r\n          Home\r\n        </button>\r\n        <button className=\"btnNav\" onClick={() => setPage(\"GenAgeCase\")}>\r\n          성별/연령별\r\n        </button>\r\n      </div>\r\n      <div className=\"Content\">\r\n        {page === \"Home\" ? (\r\n          <div className=\"Middle\">\r\n            <div className=\"Date\">\r\n              <DatePicker\r\n                locale={ko} // 언어설정 기본값은 영어\r\n                dateFormat=\"yyyy/MM/dd\" // 날짜 형식 설정\r\n                className=\"react-datepicker\" // 클래스 명 지정 css주기 위해\r\n                maxDate={new Date()} // 선택할 수 있는 최소 날짜값 지정\r\n                closeOnScroll={true} // 스크롤을 움직였을 때 자동으로 닫히도록 설정 기본값 false\r\n                placeholderText=\"시작일자\" // placeholder\r\n                selected={startDt} // value\r\n                onChange={(date) => setStartDt(new Date(date))} // 날짜를 선택하였을 때 실행될 함수\r\n              />\r\n              ~\r\n              <DatePicker\r\n                locale={ko} // 언어설정 기본값은 영어\r\n                dateFormat=\"yyyy/MM/dd\" // 날짜 형식 설정\r\n                className=\"react-datepicker\" // 클래스 명 지정 css주기 위해\r\n                maxDate={new Date()} // 선택할 수 있는 최소 날짜값 지정\r\n                closeOnScroll={true} // 스크롤을 움직였을 때 자동으로 닫히도록 설정 기본값 false\r\n                placeholderText=\"시작일자\" // placeholder\r\n                selected={endDt} // value\r\n                onChange={(date) => setEndDt(new Date(date))} // 날짜를 선택하였을 때 실행될 함수\r\n              />\r\n              <button\r\n                className=\"btnSearch\"\r\n                onClick={() => props.handleButtonClick(startDt, endDt)}\r\n              >\r\n                검색\r\n              </button>\r\n            </div>\r\n            <Chart data={props.lineChartData} />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h3>기준일자 : {endDt.toString()}</h3>\r\n            <GenAge genData={props.genData} ageData={props.ageData} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Covid;\r\n","import React, { useState } from \"react\";\r\nimport CovidPresenter from \"./Covid.presenter\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nconst Covid = () => {\r\n  const [lineChartData, setLineChartData] = useState([]);\r\n  const [ageData, setAgeData] = useState([]);\r\n  const [genData, setGenData] = useState([]);\r\n  const handleButtonClick = (startDt, endDt) => {\r\n    console.log(startDt, endDt);\r\n\r\n    setLineChart(startDt, endDt);\r\n    setGenAgeCase(startDt, endDt);\r\n  };\r\n\r\n  const setLineChart = async (startDt, endDt) => {\r\n    // console.log(\"clicked\");\r\n    console.log(\r\n      \"startDt:\" +\r\n        moment(startDt).format(\"YYYYMMDD\") +\r\n        \"/endDt:\" +\r\n        moment(endDt).format(\"YYYYMMDD\")\r\n    );\r\n    const url =\r\n      \"http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson\";\r\n    const ServiceKey =\r\n      \"pazBdlMEQ8jBn1ovS4UfBWEMzypVRd5jPd887GygCIAQWJYJWbzAcAn3w5jaYyPN3lwpX69kUb6dl3rbeMgAww%3D%3D\";\r\n    let pageNo = \"1\";\r\n    let numOfRows = \"10\";\r\n    let startCreateDt = moment(startDt).format(\"YYYYMMDD\");\r\n    let endCreateDt = moment(endDt).format(\"YYYYMMDD\");\r\n    let tmpArr = [];\r\n\r\n    console.log(\r\n      \"url\",\r\n      url +\r\n        \"?ServiceKey=\" +\r\n        ServiceKey +\r\n        \"&pageNo=\" +\r\n        pageNo +\r\n        \"&numOfRows=\" +\r\n        numOfRows +\r\n        \"&startCreateDt=\" +\r\n        startCreateDt +\r\n        \"&endCreateDt=\" +\r\n        endCreateDt\r\n    );\r\n\r\n    const response = await axios.get(\r\n      url +\r\n        \"?ServiceKey=\" +\r\n        ServiceKey +\r\n        \"&pageNo=\" +\r\n        pageNo +\r\n        \"&numOfRows=\" +\r\n        numOfRows +\r\n        \"&startCreateDt=\" +\r\n        startCreateDt +\r\n        \"&endCreateDt=\" +\r\n        endCreateDt\r\n    );\r\n    // console.log(response.data);\r\n\r\n    if (response.data.response.header.resultCode === \"00\") {\r\n      if (response.data.response.body.items.length !== 0) {\r\n        tmpArr = response.data.response.body.items.item;\r\n        if (tmpArr.length > 1) {\r\n          tmpArr.reverse();\r\n        } else {\r\n          tmpArr = [];\r\n          tmpArr.push(response.data.response.body.items.item);\r\n        }\r\n        setLineChartData(tmpArr);\r\n      } else {\r\n        console.log(\r\n          \"error : \",\r\n          response.data.response.header.resultCode,\r\n          response.data.response.header.resultMsg\r\n        );\r\n      }\r\n    }\r\n    // console.log(\"data\", data);\r\n  };\r\n\r\n  const setGenAgeCase = async (startDt, endDt) => {\r\n    console.log(\r\n      \"startDt:\" +\r\n        moment(startDt).format(\"YYYYMMDD\") +\r\n        \"/endDt:\" +\r\n        moment(endDt).format(\"YYYYMMDD\")\r\n    );\r\n    const url =\r\n      \"http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19GenAgeCaseInfJson\";\r\n    const ServiceKey =\r\n      \"pazBdlMEQ8jBn1ovS4UfBWEMzypVRd5jPd887GygCIAQWJYJWbzAcAn3w5jaYyPN3lwpX69kUb6dl3rbeMgAww%3D%3D\";\r\n    let pageNo = \"1\";\r\n    let numOfRows = \"10\";\r\n    let startCreateDt = moment(startDt).format(\"YYYYMMDD\");\r\n    let endCreateDt = moment(endDt).format(\"YYYYMMDD\");\r\n    let tmpArr = [];\r\n\r\n    console.log(\r\n      \"url\",\r\n      url +\r\n        \"?ServiceKey=\" +\r\n        ServiceKey +\r\n        \"&pageNo=\" +\r\n        pageNo +\r\n        \"&numOfRows=\" +\r\n        numOfRows +\r\n        \"&startCreateDt=\" +\r\n        startCreateDt +\r\n        \"&endCreateDt=\" +\r\n        endCreateDt\r\n    );\r\n\r\n    const response = await axios.get(\r\n      url +\r\n        \"?ServiceKey=\" +\r\n        ServiceKey +\r\n        \"&pageNo=\" +\r\n        pageNo +\r\n        \"&numOfRows=\" +\r\n        numOfRows +\r\n        \"&startCreateDt=\" +\r\n        endCreateDt +\r\n        \"&endCreateDt=\" +\r\n        endCreateDt\r\n    );\r\n    console.log(response.data);\r\n\r\n    if (response.data.response.header.resultCode === \"00\") {\r\n      let tmpAge = [];\r\n      let tmpGen = [];\r\n      // console.log(response.data.response.body.items.length);\r\n      if (response.data.response.body.items.length !== 0) {\r\n        tmpArr = response.data.response.body.items.item;\r\n        if (tmpArr === []) return;\r\n        if (tmpArr.length > 1) tmpArr.reverse();\r\n\r\n        tmpArr.map((i) => {\r\n          if (i.gubun === \"여성\" || i.gubun === \"남성\") {\r\n            tmpGen.push(i);\r\n          } else {\r\n            tmpAge.push(i);\r\n          }\r\n          // console.log(\"tmpGen\", tmpGen);\r\n          // console.log(\"tmpAge\", tmpAge);\r\n          setAgeData(tmpAge);\r\n          setGenData(tmpGen);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CovidPresenter\r\n      lineChartData={lineChartData}\r\n      genData={genData}\r\n      ageData={ageData}\r\n      handleButtonClick={handleButtonClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Covid;\r\n","import React from \"react\";\r\nimport Covid from \"./Components/Covid\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      {/* <Toolbar /> */}\r\n      <Route path=\"/\" exact={true} component={Covid} />\r\n      {/* <Route path=\"/about\" component={About} /> */}\r\n      {/* <Route path=\"/movie-detail\" component={Detail} /> */}\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}